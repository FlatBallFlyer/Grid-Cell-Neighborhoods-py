import unittest
from community import Community

class TestCommunity(unittest.TestCase):

  def test_simple(self):
    matrix = [
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0],
      [ 0, 0, 0,-1,-1,-1,-1,-1, 0, 0, 0],
      [ 0, 0,-1,-1,-1,+1,-1,-1,-1, 0, 0],
      [ 0, 0, 0,-1,-1,-1,-1,-1, 0, 0, 0],
      [ 0, 0, 0, 0,-1,-1,-1, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    community = Community(matrix, 3)
    self.assertEqual(community.getCount(), 25)

  def test_left_edge(self):
    matrix = [
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0],
      [-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0],
      [-1,+1,-1,-1,-1, 0, 0, 0, 0, 0, 0],
      [-1,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0],
      [-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    community = Community(matrix, 3)
    self.assertEqual(community.getCount(), 21)

  def test_right_edge(self):
    matrix = [
      [ 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1],
      [ 0, 0, 0, 0, 0, 0,-1,-1,-1,+1,-1],
      [ 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1],
      [ 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    community = Community(matrix, 3)
    self.assertEqual(community.getCount(), 17)

  def test_small(self):
    matrix = [
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0],
      [ 0, 0, 0, 0, 0,-1,-1,+1,-1,-1, 0],
      [ 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    community = Community(matrix, 2)
    self.assertEqual(community.getCount(), 13)

  def test_separate(self):
    matrix = [
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0],
      [ 0, 0, 0, 0, 0,-1,-1,+1,-1,-1, 0],
      [ 0, 0, 0, 0, 0, 0,-1,-1,-1, 0, 0],
      [ 0, 0, 0,-1, 0, 0, 0,-1, 0, 0, 0],
      [ 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0],
      [ 0,-1,-1,+1,-1,-1, 0, 0, 0, 0, 0],
      [ 0, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    community = Community(matrix, 2)
    self.assertEqual(community.getCount(), 26)

  def test_overlap(self):
    matrix = [
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0],
      [ 0, 0, 0,-1,-1,-1,-1, 0, 0, 0, 0],
      [ 0, 0,-1,-1,-1,+1,-1,-1, 0, 0, 0],
      [ 0,-1,-1,+1,-1,-1,-1, 0, 0, 0, 0],
      [ 0, 0,-1,-1,-1,-1, 0, 0, 0, 0, 0],
      [ 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    community = Community(matrix, 2)
    self.assertEqual(community.getCount(), 22)

  def test_wide(self):
    matrix = [
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 3, 4, 5, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    community = Community(matrix, 2)
    self.assertEqual(community.getCount(), 23)

  def test_tiny(self):
    matrix = [
      [ 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0],
      [ 0, 0, 1, 0, 0],
      [ 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0]
    ]
    community = Community(matrix, 1)
    self.assertEqual(community.getCount(), 5)

  def test_full(self):
    matrix = [
      [ 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0],
      [ 0, 0,99, 0, 0],
      [ 0, 0, 0, 0, 0],
      [ 0, 0, 0, 0, 0]
    ]
    community = Community(matrix, 4)
    self.assertEqual(community.getCount(), 25)

  def test_sneaky(self):
    matrix = [
      [ 0, 0,-1],
      [ 0,-1,-1],
      [-1,-1, 8,-1],
      [],
      [ 0, 0,-1, 0, 0]
    ]
    community = Community(matrix, 2)
    self.assertEqual(community.getCount(), 8)
